<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode日记</title>
    <url>/2020/02/06/LeetCode/</url>
    <content><![CDATA[<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ul>
<li><p>双指针</p>
</li>
<li><p>排序</p>
</li>
<li><p>贪心思想  </p>
</li>
<li><p>二分查找</p>
</li>
<li><p>分治</p>
</li>
<li><p>搜索</p>
</li>
<li><p>动态规划</p>
</li>
<li><p>数学</p>
</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li><p>链表</p>
</li>
<li><p>树</p>
</li>
<li><p>栈和队列</p>
</li>
<li><p>哈希表</p>
</li>
<li><p>字符串</p>
</li>
<li><p>数组与矩阵</p>
</li>
<li><p>图</p>
</li>
<li><p>位运算</p>
</li>
</ul>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><p> 今天复习了一下很久之前做的题，顺便写了注解。</p>
<h4 id="1两数之和"><a href="#1两数之和" class="headerlink" title="#1两数之和"></a>#1两数之和</h4><p>  <strong><em>tag：数组 哈希表</em></strong></p>
<p> 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br> 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br> 示例:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9  </span></pre></td></tr><tr><td class="code"><pre><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span></pre></td></tr><tr><td class="code"><pre><span class="line">所以返回 [0, 1]</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;Integer,Integer&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//运用哈希表可提高效率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">int</span> find=target-nums[i];<span class="comment">//定义当前数对应的需要寻找的数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(map.containsKey(find))<span class="comment">//在哈希表中查找是否有该数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(find),i&#125;;<span class="comment">//找到则返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           map.put(nums[i],i);<span class="comment">//没找到将当前数存入哈希表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="2两数相加"><a href="#2两数相加" class="headerlink" title="#2两数相加"></a>#2两数相加</h4><p> <strong><em>tag：链表 数学</em></strong></p>
<p> 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br> 示例：  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：7 -&gt; 0 -&gt; 8  </span></pre></td></tr><tr><td class="code"><pre><span class="line">原因：342 + 465 &#x3D; 807</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * public class ListNode &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode dummy =<span class="keyword">new</span> ListNode(-<span class="number">1</span>);<span class="comment">//头结点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode cur=dummy;<span class="comment">//移动指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;<span class="comment">//进位标识符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span> || l2!=<span class="keyword">null</span>)<span class="comment">//就算有一个为空了，另一个也要计算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> d1=(l1==<span class="keyword">null</span>?<span class="number">0</span>:l1.val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> d2=(l2==<span class="keyword">null</span>?<span class="number">0</span>:l2.val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> sum=d1+d2+carry;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            carry =sum&gt;=<span class="number">10</span>?<span class="number">1</span>:<span class="number">0</span>;<span class="comment">//大于等于10下次就要进一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);<span class="comment">//指针的下一节点为存放本次相加结果的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//移动指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur=cur.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)l1=l1.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)l2=l2.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(carry==<span class="number">1</span>) cur.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>); <span class="comment">//若最后一位要进位，则需添加一新节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> dummy.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><p> 今天正式开始按照顺序刷题。</p>
<h4 id="167两数之和Ⅱ-输入有序数组"><a href="#167两数之和Ⅱ-输入有序数组" class="headerlink" title="#167两数之和Ⅱ-输入有序数组"></a>#167两数之和Ⅱ-输入有序数组</h4><p> <strong><em>tag：数组 双指针</em></strong></p>
<p> 给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于index2。<br> 说明:<br> 返回的下标值（index1 和 index2）不是从零开始的。<br> 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br> 示例:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: numbers &#x3D; [2, 7, 11, 15], target &#x3D; 9  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1,2]  </span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 2 与 7 之和等于目标数 9 。因此 index1 &#x3D; 1, index2 &#x3D; 2 。</span></pre></td></tr></table></figure>


 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>;<span class="comment">//指针1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index2=numbers.length-<span class="number">1</span>;<span class="comment">//指针2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(index1&lt;index2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(numbers[index1]+numbers[index2]&gt;target)<span class="comment">//大于目标值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                index2--;<span class="comment">//将指向大数的指针往下移</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[index1]+numbers[index2]&lt;target)<span class="comment">//反之</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                index1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;index1+<span class="number">1</span>,index2+<span class="number">1</span>&#125;;<span class="comment">//相等输出下标</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="633平方数之和"><a href="#633平方数之和" class="headerlink" title="#633平方数之和"></a>#633平方数之和</h4><p> <strong><em>tag：数学 双指针</em></strong></p>
<p> 给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c。<br> 示例1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True  </span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 1 * 1 + 2 * 2 &#x3D; 5</span></pre></td></tr></table></figure>

<p> 示例2:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 3  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: False</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(c&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> n1=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> n2=(<span class="keyword">int</span>)java.lang.Math.sqrt(c*<span class="number">1.0</span>);<span class="comment">//开根号方法形参为double类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(n1&lt;=n2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//防止sum溢出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// double sum=n1*n1+n2*n2;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// if(sum==c)return true;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// else if(sum&gt;c)n2--;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// else n1++;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>((c-n2*n2)==n1*n1)<span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((c-n2*n2)&gt;n1*n1)n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> n2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="345反转字符串中的元音字母"><a href="#345反转字符串中的元音字母" class="headerlink" title="#345反转字符串中的元音字母"></a>#345反转字符串中的元音字母</h4><p> <strong><em>tag：字符串 双指针</em></strong></p>
<p> 编写一个函数，以字符串作为输入，反转该字符串中的元音字母。<br> 示例 1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;hello&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;holle&quot;</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;leetcode&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;leotcede&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">说明: 元音字母不包含字母&quot;y&quot;。</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List yuanyin=<span class="keyword">new</span> ArrayList();<span class="comment">//运用list节省打代码的时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);<span class="comment">//string类型不可变，用stringbuilder</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'e'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'i'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'o'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'u'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'A'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'E'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'I'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'O'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'U'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> head=<span class="number">0</span>;<span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> tail=s.length()-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">char</span> tem;<span class="comment">//交换字符的中间变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(head&lt;tail)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//不是元音字符的那端指针进行移动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(yuanyin.contains(s.charAt(head))==<span class="keyword">false</span> &amp;&amp; yuanyin.contains(s.charAt(tail))== <span class="keyword">true</span>)head++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(yuanyin.contains(s.charAt(head))==<span class="keyword">true</span> &amp;&amp; yuanyin.contains(s.charAt(tail))== <span class="keyword">false</span>)tail--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(yuanyin.contains(s.charAt(head))==<span class="keyword">false</span> &amp;&amp; yuanyin.contains(s.charAt(tail))== <span class="keyword">false</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                head++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//交换字符后也要移动指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                tem=s.charAt(head);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sb.setCharAt(head,s.charAt(tail));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sb.setCharAt(tail,tem);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                head++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="680验证回文字符串Ⅱ"><a href="#680验证回文字符串Ⅱ" class="headerlink" title="#680验证回文字符串Ⅱ"></a>#680验证回文字符串Ⅱ</h4><p> <strong><em>tag：字符串 双指针</em></strong></p>
<p> 给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。<br> 示例 1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;aba&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True</span></pre></td></tr></table></figure>

<p> 示例 2:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;abca&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True  </span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 你可以删除c字符。</span></pre></td></tr></table></figure>

<p> 注意:<br> 字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> j=s.length()-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i&lt;j)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))<span class="comment">//遇到不一样的情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//有两种删法，删前面的字符和删后面的字符,只要有一种删之后能形成回文就可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> isPalindrome(s, i+<span class="number">1</span>, j) || isPalindrome(s, i, j-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//没遇到不一样的情况，显然满足回文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//判断是否回文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i&lt;j)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="88合并两个有序数组"><a href="#88合并两个有序数组" class="headerlink" title="#88合并两个有序数组"></a>#88合并两个有序数组</h4><p> <strong><em>tag：数组 双指针</em></strong></p>
<p> 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。<br> 说明:<br> 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br> 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br> 示例:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1,2,2,3,5,6]</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;<span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(n1&lt;nums1.length)<span class="comment">//n1超过num1的边界时循环终止</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//双指针都还在有效数范围内时，需比较大小进行插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(n1&lt;m &amp;&amp; n2&lt;n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">if</span>(nums2[n2]&lt;=nums1[n1])<span class="comment">//插入数比目标数小时插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   <span class="keyword">for</span>(<span class="keyword">int</span> i=m-<span class="number">1</span>;i&gt;=n1;i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       nums1[i+<span class="number">1</span>]=nums1[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   nums1[n1]=nums2[n2];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   n2++;<span class="comment">//移动到下一个插入数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                   m++;<span class="comment">//有效数边界加1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">else</span><span class="comment">//不用插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   n1++;<span class="comment">//移动到下一个目标数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//目标数组已无有效数，则只需将剩下的数依次插入目标数组即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(n1&gt;=m &amp;&amp; n2&lt;n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               nums1[n1++]=nums2[n2++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span><span class="comment">//走出循环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><p> 今天就写了两题，第二题废了好久的时间，自己的思路上有很多的漏洞</p>
<h4 id="141环形链表"><a href="#141环形链表" class="headerlink" title="#141环形链表"></a>#141环形链表</h4><p> <strong><em>tag：链表 双指针 哈希表</em></strong></p>
<p> 给定一个链表，判断链表中是否有环。</p>
<table>
<thead>
<tr>
<th align="center">HashMap</th>
<th align="center">HashSet</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HashMap实现了Map接口</td>
<td align="center">HashSet实现了Set接口</td>
</tr>
<tr>
<td align="center">HashMap储存键值对</td>
<td align="center">HashSet仅仅存储对象</td>
</tr>
<tr>
<td align="center">使用put()方法将元素放入map中</td>
<td align="center">使用add()方法将元素放入set中</td>
</tr>
<tr>
<td align="center">HashMap中使用键对象来计算hashcode值</td>
<td align="center">HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false</td>
</tr>
<tr>
<td align="center">HashMap比较快，因为是使用唯一的键来获取对象</td>
<td align="center">HashSet较HashMap来说比较慢</td>
</tr>
</tbody></table>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     ListNode(<span class="keyword">int</span> x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         val = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         next = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//双指针法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next ==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       ListNode slow=head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       ListNode fast=head.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(fast!=slow)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">// if(fast.next==null)return false;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//需要注意的是只判断fast.next是否为空是不够的，因为fast.next.next赋值给fast,则fast有可能为空，则fast.next就会报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(fast==<span class="keyword">null</span> || fast.next ==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               slow=slow.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               fast=fast.next.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;    </span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//能套圈说明是个环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//哈希表法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       Set&lt;ListNode&gt; hasSeen=<span class="keyword">new</span> HashSet&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(head!=<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(hasSeen.contains(head))<span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//哈希表内已存在则说明是环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               hasSeen.add(head);</span></pre></td></tr><tr><td class="code"><pre><span class="line">               head=head.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="524通过删除字母匹配到字典里最长单词"><a href="#524通过删除字母匹配到字典里最长单词" class="headerlink" title="#524通过删除字母匹配到字典里最长单词"></a>#524通过删除字母匹配到字典里最长单词</h4><p> <strong><em>tag：字符串 双指针</em></strong>  </p>
<p> 给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。<br> 示例 1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">s &#x3D; &quot;abpcplea&quot;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">d &#x3D;[&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;apple&quot;</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">s &#x3D; &quot;abpcplea&quot;, d &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;a&quot;</span></pre></td></tr></table></figure>

<p> 说明:<br> 所有输入的字符串只包含小写字母。<br> 字典的大小不会超过 1000。<br> 所有输入的字符串长度不会超过 1000。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLongestWord</span><span class="params">(String s, List&lt;String&gt; d)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//判断字符串字典中的字符串能否由给定字符串得到，能的话再比较长度和字典中的序列，进行更新</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;<span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String maxstr=<span class="string">""</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String cur:d)<span class="comment">//对每个字典里的字符串遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(s1=<span class="number">0</span>;s1&lt;s.length();s1++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s.charAt(s1)==cur.charAt(s2))s2++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s2==cur.length())<span class="comment">//字符串s删减字符能得到该字符串cur</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(cur.length()&gt;maxstr.length() || (cur.length()==maxstr.length() &amp;&amp; maxstr.compareTo(cur)&gt;<span class="number">0</span>))<span class="comment">//字符串在字典中序列较小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        maxstr=cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">// return maxstr;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//第一次得到就将其输出了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;<span class="comment">//不然会超过下标边界</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            s2=<span class="number">0</span>;<span class="comment">//指针重置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> maxstr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h3><p> 今天开始刷排序题。</p>
<h4 id="215数组中的第K个最大元素"><a href="#215数组中的第K个最大元素" class="headerlink" title="#215数组中的第K个最大元素"></a>#215数组中的第K个最大元素</h4><p> <strong><em>tag：堆排序</em></strong>  </p>
<p> 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4] 和 k &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 5</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 4</span></pre></td></tr></table></figure>

<p> 说明:<br> 你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p>
<p> <strong><em>PriorityQueue详解</em></strong><br> PriorityQueue 一个基于优先级的无界优先级队列。优先级队列的元素按照其自然顺序进行排序，或者根据构造队列时提供的 Comparator 进行排序，具体取决于所使用的构造方法。该队列不允许使用 null 元素也不允许插入不可比较的对象(没有实现Comparable接口的对象)。<br> PriorityQueue 队列的<strong>头指排序规则最小那个元素</strong>。如果多个元素都是最小值则随机选一个。<br> PriorityQueue 是一个无界队列，但是初始的容量(实际是一个Object[])，随着不断向优先级队列添加元素，其容量会自动扩容，无需指定容量增加策略的细节。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础排序法 时间复杂度 O(NlogN)，空间复杂度 O(1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       Arrays.sort(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> nums[nums.length-k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序法 时间复杂度 O(NlogK)，空间复杂度 O(K)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//初始化堆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;((n1, n2) -&gt; n1 - n2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// 依次将数组元素加入堆中 保持堆的大小为K</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> tem:nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           heap.add(tem);<span class="comment">//将数组元素添加进队列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(heap.size()&gt;k)<span class="comment">//大小超过k</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               heap.poll();<span class="comment">//最小元素出列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> heap.poll();<span class="comment">//返回第k个最大元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="347前K个高频元素"><a href="#347前K个高频元素" class="headerlink" title="#347前K个高频元素"></a>#347前K个高频元素</h4><p> <strong><em>tag：堆 桶 哈希表</em></strong>  </p>
<p> 给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1,1,1,2,2,3], k &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1,2]</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1], k &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1]</span></pre></td></tr></table></figure>

<p> 说明：<br> 你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。<br> 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">//哈希表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Map&lt;Integer, Integer&gt; frequencyForNum = <span class="keyword">new</span> HashMap&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       frequencyForNum.put(num, frequencyForNum.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);<span class="comment">//关键字和下标索引 相同关键字会覆盖掉之前的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   List&lt;Integer&gt;[] buckets = <span class="keyword">new</span> ArrayList[nums.length + <span class="number">1</span>];<span class="comment">//桶下标表示频率，桶内元素表示数组内的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> key : frequencyForNum.keySet()) &#123;<span class="comment">//keySet表示返回所有key的列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> frequency = frequencyForNum.get(key);<span class="comment">//拿到key关键字的索引，即频率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (buckets[frequency] == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           buckets[frequency] = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//用来存储该频率下的所有数组元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       buckets[frequency].add(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   List&lt;Integer&gt; topK = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//存储频率前k高的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = buckets.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; topK.size() &lt; k; i--) &#123;<span class="comment">//下标越大，频率越高，所以从后往前遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (buckets[i] == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (buckets[i].size() &lt;= (k - topK.size())) &#123;<span class="comment">//若该桶内元素可全放入目标数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           topK.addAll(buckets[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           topK.addAll(buckets[i].subList(<span class="number">0</span>, k - topK.size()));<span class="comment">//放入剩下所需要的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> topK;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>C#学习笔记</title>
    <url>/2020/01/18/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://space.bilibili.com/128373173?from=search&seid=6886721913430300205" target="_blank" rel="noopener">B站C#学习视频</a></p>
<ul>
<li><p>.net：一般指.net平台</p>
</li>
<li><p>.Net Framework 框架：是基于.net平台开发的程序能够有一个稳定的运行环境。（类库、环境）</p>
</li>
<li><p>解决方案包含项目，一个解决方案可以有多个项目。项目包含类，一个项目可以包含多个 类。   </p>
<ol>
<li>Properties：属性</li>
<li>App.config: 配置文件</li>
<li>Program.cs： 类文件</li>
</ol>
</li>
<li><p>引用命名空间：就是一个地址</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span></pre></td></tr></table></figure>
</li>
<li><p><strong>Camel 驼峰命名法</strong>：要求变量名首单词的首字母要小写，其余每个单词的首字母要大写。多用于给变量命名。</p>
</li>
<li><p><strong>Pascal 帕斯卡命名法</strong>：要求每个单词的首字母都要大写，其余字母小写。多用于给 类或者方法命名。</p>
</li>
<li><p>占位符  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"我的名字是&#123;0&#125;，我今年&#123;1&#125;"</span>,name,age);</span></pre></td></tr></table></figure>
</li>
<li><p><strong>前++</strong> 先将该值加1，再将其代入运算<br><strong>后++</strong> 先将该值代入运算，再将该值加1</p>
</li>
<li><p><strong>一元运算符</strong> 只需要一个操作符，++ –等<br><strong>二元运算符</strong> 需要两个或以上的运算符，+-*/%<br>一元运算符优先级高于二元运算符<br><code>int a=10; int b=10 + ++a;</code><br>先算++a，在计算与10的和，结果为21</p>
</li>
<li><p><strong>转义符</strong> 一个’&#39;+一个特殊字符组成一个具有特殊意义的字符。  </p>
<ol>
<li><p>\n 表示换行  </p>
</li>
<li><p>&quot; 表示英文半角的双引号</p>
</li>
<li><p>\t 表示一个tab键的大空格</p>
</li>
<li><p>\b 表示一个BackSpace退格键，会把前面一个字符删掉。头尾无作用。</p>
</li>
<li><p>输入路径需加@，不然会认为是一系列转义符<br><code>Console.WriteLine(@&quot;C:\c\a\d\f&quot;);</code></p>
</li>
<li><p>@还可以将字符串按照原格式输出  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">@"本来分成两行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">是会报错的"</span>);</span></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>隐式类型转换（自动类型转换）<br>条件1：两种类型兼容 int和double都是数字类型<br>条件2：原类型小于目标类型 例子：int-float int-double<br>显示类型转换（强制类型转换）<br>条件1：两种类型兼容<br>条件2：原类型大于目标类型 例子：double-int double-float<br><strong>int和int类型运算结果还是int</strong><br><strong>int和double运算结果是double类型</strong><br>下列b的结果就是10</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> a=<span class="number">10.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b=(<span class="keyword">int</span>)a;</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习笔记</title>
    <url>/2019/12/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av56979800?from=search&seid=3637218318597964305" target="_blank" rel="noopener">B站学习视频</a></p>
<ul>
<li><p>脚本语言：逐行解释执行的语言。</p>
</li>
<li><p>JS的组成  </p>
<ol>
<li>ECMAScript：JavaScript语法（JavaScript-网景公司 Jscript-微软公司）</li>
<li>DOM：页面文档对象模型</li>
<li>BOM：浏览器对象模型</li>
</ol>
</li>
<li><p>JS有三种书写位置，分别为行内、内嵌和外部  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 2.内嵌式的js --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            <span class="comment">// alert('沙漠骆驼');</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 3. 外部JS写法，双标签 script 中间一定不能写代码 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"my.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 1.行内式的js 直接写到元素内部 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"唐伯虎"</span> <span class="attr">onclick</span>=<span class="string">"alert('秋香姐')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">+ 注释  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```html</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="comment">//    1.单行注释 crtl+/</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="comment">/* 2.多行注释 默认的快捷键 shift+alt+a */</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">+ JS输入输出语句  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```html</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">         prompt(<span class="string">'请输入你的年龄'</span>);<span class="comment">//这是一个输入框</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">         alert(<span class="string">'计算的结果是'</span>);<span class="comment">//弹出警示框 输出的展示给用户的</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'这是控制台给程序员看的'</span>);<span class="comment">//控制台输出 给程序员测试用的</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>变量和值<br>声明变量时，总是以关键字Var打头<br><code>var winner = 2;</code><br><code>var name = &quot;Duke;&quot;</code><br><code>var isEligible = false;</code><br>也可不赋初值<br><code>var losers;</code><br>字符串表达式<br><code>&quot;Dear &quot; + &quot;Reader&quot; + &quot;,&quot;</code> 得到新字符串”Dear Reader,”  </p>
</li>
<li><p>改变html文件中的元素  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"你好 Dolly"</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>Js对象<br>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name :   value) 来定义。<br><code>var person={firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566};</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">firstname : <span class="string">"John"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">lastname  : <span class="string">"Doe"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">id        :  <span class="number">5566</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>对象属性有两种寻址方式：<br><code>name=person.lastname;name=person[&quot;lastname&quot;];</code></p>
</li>
<li><p>对象中的方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>创建和使用对象方法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对象方法是一个函数定义,并作为一个属性值存储。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript"><span class="keyword">var</span> person = &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">   firstName: <span class="string">"John"</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">   lastName : <span class="string">"Doe"</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   id : 5566,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">   fullName : <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo1"</span>).innerHTML = <span class="string">"不加括号输出函数表达式："</span>  + person.fullName;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo2"</span>).innerHTML = <span class="string">"加括号输出函数执行结果："</span>  +  person.fullName();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>对字符串和数字进行加法运算<br>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串  </p>
</li>
<li><p>For/In 循环<br>JavaScript for/in 语句循环遍历对象的属性  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">"John"</span>,<span class="attr">lname</span>:<span class="string">"Doe"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)  <span class="comment">// x 为属性名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   txt=txt + person[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>变量提升<br>函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部。JavaScript 只有声明的变量会提升，初始化的不会。  </li>
<li>字符串断行需要使用反斜杠\  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">"Hello \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">World!"</span>;</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2019/12/02/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo-Next-主题美化"><a href="#Hexo-Next-主题美化" class="headerlink" title="Hexo Next 主题美化"></a>Hexo Next 主题美化</h1><p> <a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">Next主题美化指南</a></p>
<h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo deploy</code> #部署到GitHub<br><code>hexo help</code> # 查看帮助<br><code>hexo version</code> #查看Hexo的版本<br>缩写：<br><code>hexo n == hexo new</code><br><code>hexo g == hexo generate</code><br><code>hexo s == hexo server</code><br><code>hexo d == hexo deploy</code><br>组合命令：<br><code>hexo s -g</code> #生成并本地预览<br><code>hexo d -g</code> #生成并上传</p>
<h1 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h1><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法参考</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>

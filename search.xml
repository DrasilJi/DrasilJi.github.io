<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode日记</title>
    <url>/2020/02/06/LeetCode/</url>
    <content><![CDATA[<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ul>
<li><p>双指针</p>
</li>
<li><p>排序</p>
</li>
<li><p>贪心思想  </p>
</li>
<li><p>二分查找</p>
</li>
<li><p>分治</p>
</li>
<li><p>搜索</p>
</li>
<li><p>动态规划</p>
</li>
<li><p>数学</p>
</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li><p>链表</p>
</li>
<li><p>树</p>
</li>
<li><p>栈和队列</p>
</li>
<li><p>哈希表</p>
</li>
<li><p>字符串</p>
</li>
<li><p>数组与矩阵</p>
</li>
<li><p>图</p>
</li>
<li><p>位运算</p>
</li>
</ul>
<h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><p> 今天复习了一下很久之前做的题，顺便写了注解。</p>
<h4 id="1两数之和"><a href="#1两数之和" class="headerlink" title="#1两数之和"></a>#1两数之和</h4><p>  <strong><em>tag：数组 哈希表</em></strong></p>
<p> 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br> 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br> 示例:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9  </span></pre></td></tr><tr><td class="code"><pre><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span></pre></td></tr><tr><td class="code"><pre><span class="line">所以返回 [0, 1]</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;Integer,Integer&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//运用哈希表可提高效率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">int</span> find=target-nums[i];<span class="comment">//定义当前数对应的需要寻找的数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(map.containsKey(find))<span class="comment">//在哈希表中查找是否有该数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(find),i&#125;;<span class="comment">//找到则返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           map.put(nums[i],i);<span class="comment">//没找到将当前数存入哈希表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="2两数相加"><a href="#2两数相加" class="headerlink" title="#2两数相加"></a>#2两数相加</h4><p> <strong><em>tag：链表 数学</em></strong></p>
<p> 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br> 示例：  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：7 -&gt; 0 -&gt; 8  </span></pre></td></tr><tr><td class="code"><pre><span class="line">原因：342 + 465 &#x3D; 807</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * public class ListNode &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode dummy =<span class="keyword">new</span> ListNode(-<span class="number">1</span>);<span class="comment">//头结点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode cur=dummy;<span class="comment">//移动指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;<span class="comment">//进位标识符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span> || l2!=<span class="keyword">null</span>)<span class="comment">//就算有一个为空了，另一个也要计算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> d1=(l1==<span class="keyword">null</span>?<span class="number">0</span>:l1.val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> d2=(l2==<span class="keyword">null</span>?<span class="number">0</span>:l2.val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> sum=d1+d2+carry;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            carry =sum&gt;=<span class="number">10</span>?<span class="number">1</span>:<span class="number">0</span>;<span class="comment">//大于等于10下次就要进一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);<span class="comment">//指针的下一节点为存放本次相加结果的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//移动指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur=cur.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)l1=l1.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)l2=l2.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(carry==<span class="number">1</span>) cur.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>); <span class="comment">//若最后一位要进位，则需添加一新节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> dummy.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><p> 今天正式开始按照顺序刷题。</p>
<h4 id="167两数之和Ⅱ-输入有序数组"><a href="#167两数之和Ⅱ-输入有序数组" class="headerlink" title="#167两数之和Ⅱ-输入有序数组"></a>#167两数之和Ⅱ-输入有序数组</h4><p> <strong><em>tag：数组 双指针</em></strong></p>
<p> 给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于index2。<br> 说明:<br> 返回的下标值（index1 和 index2）不是从零开始的。<br> 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br> 示例:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: numbers &#x3D; [2, 7, 11, 15], target &#x3D; 9  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1,2]  </span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 2 与 7 之和等于目标数 9 。因此 index1 &#x3D; 1, index2 &#x3D; 2 。</span></pre></td></tr></table></figure>


 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>;<span class="comment">//指针1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index2=numbers.length-<span class="number">1</span>;<span class="comment">//指针2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(index1&lt;index2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(numbers[index1]+numbers[index2]&gt;target)<span class="comment">//大于目标值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                index2--;<span class="comment">//将指向大数的指针往下移</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[index1]+numbers[index2]&lt;target)<span class="comment">//反之</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                index1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;index1+<span class="number">1</span>,index2+<span class="number">1</span>&#125;;<span class="comment">//相等输出下标</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="633平方数之和"><a href="#633平方数之和" class="headerlink" title="#633平方数之和"></a>#633平方数之和</h4><p> <strong><em>tag：数学 双指针</em></strong></p>
<p> 给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c。<br> 示例1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True  </span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 1 * 1 + 2 * 2 &#x3D; 5</span></pre></td></tr></table></figure>

<p> 示例2:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 3  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: False</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(c&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> n1=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> n2=(<span class="keyword">int</span>)java.lang.Math.sqrt(c*<span class="number">1.0</span>);<span class="comment">//开根号方法形参为double类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(n1&lt;=n2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//防止sum溢出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// double sum=n1*n1+n2*n2;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// if(sum==c)return true;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// else if(sum&gt;c)n2--;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// else n1++;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>((c-n2*n2)==n1*n1)<span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((c-n2*n2)&gt;n1*n1)n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> n2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="345反转字符串中的元音字母"><a href="#345反转字符串中的元音字母" class="headerlink" title="#345反转字符串中的元音字母"></a>#345反转字符串中的元音字母</h4><p> <strong><em>tag：字符串 双指针</em></strong></p>
<p> 编写一个函数，以字符串作为输入，反转该字符串中的元音字母。<br> 示例 1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;hello&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;holle&quot;</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;leetcode&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;leotcede&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">说明: 元音字母不包含字母&quot;y&quot;。</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List yuanyin=<span class="keyword">new</span> ArrayList();<span class="comment">//运用list节省打代码的时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);<span class="comment">//string类型不可变，用stringbuilder</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'e'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'i'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'o'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'u'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'A'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'E'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'I'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'O'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        yuanyin.add(<span class="string">'U'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> head=<span class="number">0</span>;<span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> tail=s.length()-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">char</span> tem;<span class="comment">//交换字符的中间变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(head&lt;tail)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//不是元音字符的那端指针进行移动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(yuanyin.contains(s.charAt(head))==<span class="keyword">false</span> &amp;&amp; yuanyin.contains(s.charAt(tail))== <span class="keyword">true</span>)head++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(yuanyin.contains(s.charAt(head))==<span class="keyword">true</span> &amp;&amp; yuanyin.contains(s.charAt(tail))== <span class="keyword">false</span>)tail--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(yuanyin.contains(s.charAt(head))==<span class="keyword">false</span> &amp;&amp; yuanyin.contains(s.charAt(tail))== <span class="keyword">false</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                head++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//交换字符后也要移动指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                tem=s.charAt(head);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sb.setCharAt(head,s.charAt(tail));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sb.setCharAt(tail,tem);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                head++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="680验证回文字符串Ⅱ"><a href="#680验证回文字符串Ⅱ" class="headerlink" title="#680验证回文字符串Ⅱ"></a>#680验证回文字符串Ⅱ</h4><p> <strong><em>tag：字符串 双指针</em></strong></p>
<p> 给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。<br> 示例 1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;aba&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True</span></pre></td></tr></table></figure>

<p> 示例 2:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;abca&quot;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True  </span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 你可以删除c字符。</span></pre></td></tr></table></figure>

<p> 注意:<br> 字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> j=s.length()-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i&lt;j)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))<span class="comment">//遇到不一样的情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//有两种删法，删前面的字符和删后面的字符,只要有一种删之后能形成回文就可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> isPalindrome(s, i+<span class="number">1</span>, j) || isPalindrome(s, i, j-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//没遇到不一样的情况，显然满足回文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//判断是否回文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i&lt;j)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="88合并两个有序数组"><a href="#88合并两个有序数组" class="headerlink" title="#88合并两个有序数组"></a>#88合并两个有序数组</h4><p> <strong><em>tag：数组 双指针</em></strong></p>
<p> 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。<br> 说明:<br> 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br> 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br> 示例:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1,2,2,3,5,6]</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;<span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(n1&lt;nums1.length)<span class="comment">//n1超过num1的边界时循环终止</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//双指针都还在有效数范围内时，需比较大小进行插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(n1&lt;m &amp;&amp; n2&lt;n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">if</span>(nums2[n2]&lt;=nums1[n1])<span class="comment">//插入数比目标数小时插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   <span class="keyword">for</span>(<span class="keyword">int</span> i=m-<span class="number">1</span>;i&gt;=n1;i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       nums1[i+<span class="number">1</span>]=nums1[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   nums1[n1]=nums2[n2];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   n2++;<span class="comment">//移动到下一个插入数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                   m++;<span class="comment">//有效数边界加1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">else</span><span class="comment">//不用插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   n1++;<span class="comment">//移动到下一个目标数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//目标数组已无有效数，则只需将剩下的数依次插入目标数组即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(n1&gt;=m &amp;&amp; n2&lt;n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               nums1[n1++]=nums2[n2++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span><span class="comment">//走出循环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><p> 今天就写了两题，第二题废了好久的时间，自己的思路上有很多的漏洞</p>
<h4 id="141环形链表"><a href="#141环形链表" class="headerlink" title="#141环形链表"></a>#141环形链表</h4><p> <strong><em>tag：链表 双指针 哈希表</em></strong></p>
<p> 给定一个链表，判断链表中是否有环。</p>
<table>
<thead>
<tr>
<th align="center">HashMap</th>
<th align="center">HashSet</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HashMap实现了Map接口</td>
<td align="center">HashSet实现了Set接口</td>
</tr>
<tr>
<td align="center">HashMap储存键值对</td>
<td align="center">HashSet仅仅存储对象</td>
</tr>
<tr>
<td align="center">使用put()方法将元素放入map中</td>
<td align="center">使用add()方法将元素放入set中</td>
</tr>
<tr>
<td align="center">HashMap中使用键对象来计算hashcode值</td>
<td align="center">HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false</td>
</tr>
<tr>
<td align="center">HashMap比较快，因为是使用唯一的键来获取对象</td>
<td align="center">HashSet较HashMap来说比较慢</td>
</tr>
</tbody></table>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     ListNode(<span class="keyword">int</span> x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         val = x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         next = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//双指针法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next ==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       ListNode slow=head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       ListNode fast=head.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(fast!=slow)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">// if(fast.next==null)return false;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//需要注意的是只判断fast.next是否为空是不够的，因为fast.next.next赋值给fast,则fast有可能为空，则fast.next就会报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(fast==<span class="keyword">null</span> || fast.next ==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               slow=slow.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               fast=fast.next.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;    </span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//能套圈说明是个环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//哈希表法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       Set&lt;ListNode&gt; hasSeen=<span class="keyword">new</span> HashSet&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(head!=<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(hasSeen.contains(head))<span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//哈希表内已存在则说明是环</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               hasSeen.add(head);</span></pre></td></tr><tr><td class="code"><pre><span class="line">               head=head.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="524通过删除字母匹配到字典里最长单词"><a href="#524通过删除字母匹配到字典里最长单词" class="headerlink" title="#524通过删除字母匹配到字典里最长单词"></a>#524通过删除字母匹配到字典里最长单词</h4><p> <strong><em>tag：字符串 双指针</em></strong>  </p>
<p> 给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。<br> 示例 1:  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">s &#x3D; &quot;abpcplea&quot;, </span></pre></td></tr><tr><td class="code"><pre><span class="line">d &#x3D;[&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;apple&quot;</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">s &#x3D; &quot;abpcplea&quot;, d &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;a&quot;</span></pre></td></tr></table></figure>

<p> 说明:<br> 所有输入的字符串只包含小写字母。<br> 字典的大小不会超过 1000。<br> 所有输入的字符串长度不会超过 1000。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLongestWord</span><span class="params">(String s, List&lt;String&gt; d)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//判断字符串字典中的字符串能否由给定字符串得到，能的话再比较长度和字典中的序列，进行更新</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;<span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String maxstr=<span class="string">""</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String cur:d)<span class="comment">//对每个字典里的字符串遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(s1=<span class="number">0</span>;s1&lt;s.length();s1++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s.charAt(s1)==cur.charAt(s2))s2++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s2==cur.length())<span class="comment">//字符串s删减字符能得到该字符串cur</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(cur.length()&gt;maxstr.length() || (cur.length()==maxstr.length() &amp;&amp; maxstr.compareTo(cur)&gt;<span class="number">0</span>))<span class="comment">//字符串在字典中序列较小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        maxstr=cur;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">// return maxstr;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//第一次得到就将其输出了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;<span class="comment">//不然会超过下标边界</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            s2=<span class="number">0</span>;<span class="comment">//指针重置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> maxstr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h3><p> 今天开始刷排序题。</p>
<h4 id="215数组中的第K个最大元素"><a href="#215数组中的第K个最大元素" class="headerlink" title="#215数组中的第K个最大元素"></a>#215数组中的第K个最大元素</h4><p> <strong><em>tag：堆排序</em></strong>  </p>
<p> 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4] 和 k &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 5</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 4</span></pre></td></tr></table></figure>

<p> 说明:<br> 你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p>
<p> <strong><em>PriorityQueue详解</em></strong><br> PriorityQueue 一个基于优先级的无界优先级队列。优先级队列的元素按照其自然顺序进行排序，或者根据构造队列时提供的 Comparator 进行排序，具体取决于所使用的构造方法。该队列不允许使用 null 元素也不允许插入不可比较的对象(没有实现Comparable接口的对象)。<br> PriorityQueue 队列的<strong>头指排序规则最小那个元素</strong>。如果多个元素都是最小值则随机选一个。<br> PriorityQueue 是一个无界队列，但是初始的容量(实际是一个Object[])，随着不断向优先级队列添加元素，其容量会自动扩容，无需指定容量增加策略的细节。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础排序法 时间复杂度 O(NlogN)，空间复杂度 O(1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       Arrays.sort(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> nums[nums.length-k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序法 时间复杂度 O(NlogK)，空间复杂度 O(K)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//初始化堆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;((n1, n2) -&gt; n1 - n2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// 依次将数组元素加入堆中 保持堆的大小为K</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> tem:nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           heap.add(tem);<span class="comment">//将数组元素添加进队列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(heap.size()&gt;k)<span class="comment">//大小超过k</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               heap.poll();<span class="comment">//最小元素出列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> heap.poll();<span class="comment">//返回第k个最大元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="347前K个高频元素"><a href="#347前K个高频元素" class="headerlink" title="#347前K个高频元素"></a>#347前K个高频元素</h4><p> <strong><em>tag：堆 桶 哈希表</em></strong>  </p>
<p> 给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1,1,1,2,2,3], k &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1,2]</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [1], k &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [1]</span></pre></td></tr></table></figure>

<p> 说明：<br> 你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。<br> 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">//哈希表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Map&lt;Integer, Integer&gt; frequencyForNum = <span class="keyword">new</span> HashMap&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       frequencyForNum.put(num, frequencyForNum.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);<span class="comment">//关键字和下标索引 相同关键字会覆盖掉之前的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   List&lt;Integer&gt;[] buckets = <span class="keyword">new</span> ArrayList[nums.length + <span class="number">1</span>];<span class="comment">//桶下标表示频率，桶内元素表示数组内的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> key : frequencyForNum.keySet()) &#123;<span class="comment">//keySet表示返回所有key的列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> frequency = frequencyForNum.get(key);<span class="comment">//拿到key关键字的索引，即频率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (buckets[frequency] == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           buckets[frequency] = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//用来存储该频率下的所有数组元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       buckets[frequency].add(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   List&lt;Integer&gt; topK = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//存储频率前k高的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = buckets.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; topK.size() &lt; k; i--) &#123;<span class="comment">//下标越大，频率越高，所以从后往前遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (buckets[i] == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (buckets[i].size() &lt;= (k - topK.size())) &#123;<span class="comment">//若该桶内元素可全放入目标数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           topK.addAll(buckets[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           topK.addAll(buckets[i].subList(<span class="number">0</span>, k - topK.size()));<span class="comment">//放入剩下所需要的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> topK;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h3><p> 今天把排序题刷完了。开始刷贪心算法题。</p>
<h4 id="451根据字符出现频率排序"><a href="#451根据字符出现频率排序" class="headerlink" title="#451根据字符出现频率排序"></a>#451根据字符出现频率排序</h4><p> <strong><em>tag：堆 哈希表</em></strong>  </p>
<p> 给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;tree&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;eert&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#39;e&#39;出现两次，&#39;r&#39;和&#39;t&#39;都只出现一次。</span></pre></td></tr><tr><td class="code"><pre><span class="line">因此&#39;e&#39;必须出现在&#39;r&#39;和&#39;t&#39;之前。此外，&quot;eetr&quot;也是一个有效的答案。</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;cccaaa&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;cccaaa&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#39;c&#39;和&#39;a&#39;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。</span></pre></td></tr></table></figure>

<p> 示例 3:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Aabb&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;bbAa&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释:</span></pre></td></tr><tr><td class="code"><pre><span class="line">此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意&#39;A&#39;和&#39;a&#39;被认为是两种不同的字符。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       Map&lt;Character, Integer&gt; frequencyForChar = <span class="keyword">new</span> HashMap&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//getOrDefault方法表示若哈希表内有相同关键字则获得其下标，没有则获得自己设置的默认值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           frequencyForChar.put(ch, frequencyForChar.getOrDefault(ch, <span class="number">0</span>) + <span class="number">1</span>);<span class="comment">//关键字和下标索引 相同关键字会覆盖掉之前的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       List&lt;Character&gt;[] buckets = <span class="keyword">new</span> ArrayList[s.length() + <span class="number">1</span>];<span class="comment">//桶下标表示频率，桶内元素表示数组内的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> key : frequencyForChar.keySet()) &#123;<span class="comment">//keySet表示返回所有key的列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">int</span> frequency = frequencyForChar.get(key);<span class="comment">//拿到key关键字的索引，即频率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span> (buckets[frequency] == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               buckets[frequency] = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//用来存储该频率下的所有字符元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           buckets[frequency].add(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = buckets.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;<span class="comment">//下标越大，频率越高，所以从后往前遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span> (buckets[i] == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">for</span>(<span class="keyword">char</span> c :buckets[i])<span class="comment">//对桶内数组元素中的元素进行遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       sb.append(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="75颜色分类"><a href="#75颜色分类" class="headerlink" title="#75颜色分类"></a>#75颜色分类</h4><p> <strong><em>tag：排序 数组 双指针</em></strong>  </p>
<p> 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p> 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>
<p> 注意:<br> 不能使用代码库中的排序函数来解决这道题。</p>
<p> 示例:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,0,2,1,1,0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [0,0,1,1,2,2]</span></pre></td></tr></table></figure>

<p> 进阶：  </p>
<p> 一个直观的解决方案是使用计数排序的两趟扫描算法。<br> 首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。<br> 你能想出一个仅使用常数空间的一趟扫描算法吗？</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//基本法 计算出三种元素的个数 然后重写数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> c0=<span class="number">0</span>,c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">switch</span>(num)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    c0++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    c1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    c2++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c0;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nums[i]=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=c0;i&lt;c0+c1;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nums[i]=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=c0+c1;i&lt;c0+c1+c2;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nums[i]=<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//交换法 数组中有三种元素 则只需把0往左靠，2往右靠，1保持不变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> zero=-<span class="number">1</span>,one=<span class="number">0</span>,two=nums.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(one&lt;two)<span class="comment">//one如果大于two只会执行2和2相同元素交换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(nums[one]==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                swap(nums,++zero,one++);<span class="comment">//这里只可能是和元素0和元素1互换位置，所以换完位置后，one++</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[one]==<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                swap(nums,one,--two);<span class="comment">//这里和0，1，2都有可能，所以换完后one不能++，还需再一次循环判断是否还要交换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                one++;<span class="comment">//如果是1 保持不变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span><span class="comment">//交换方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> temp=nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums[i]=nums[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums[j]=temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="455分发饼干"><a href="#455分发饼干" class="headerlink" title="#455分发饼干"></a>#455分发饼干</h4><p> <strong><em>tag：贪心算法</em></strong>  </p>
<p> <strong>贪心算法：保证每次操作都是局部最优的，并且最后得到的结果是全局最优的。</strong></p>
<p> 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p> 注意：</p>
<p> 你可以假设胃口值为正。<br> 一个小朋友最多只能拥有一块饼干。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3], [1,1]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: </span></pre></td></tr><tr><td class="code"><pre><span class="line">你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。</span></pre></td></tr><tr><td class="code"><pre><span class="line">虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。</span></pre></td></tr><tr><td class="code"><pre><span class="line">所以你应该输出1。</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2], [1,2,3]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: </span></pre></td></tr><tr><td class="code"><pre><span class="line">你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。</span></pre></td></tr><tr><td class="code"><pre><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span></pre></td></tr><tr><td class="code"><pre><span class="line">所以你应该输出2.</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//将两个数组从小到大排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//根据每个孩子的胃口匹配相应的饼干 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//每后一个孩子的胃口都变大 ，则符合其胃口的饼干肯定也在当前匹配的饼干之后</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//饼干数组遍历完 则结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       Arrays.sort(g);<span class="comment">//胃口数组排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       Arrays.sort(s);<span class="comment">//饼干数组排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> cnt=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;g.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">while</span>(j&lt;s.length &amp;&amp; g[i]&gt;s[j])<span class="comment">//注意要先检测有无越界，再判断大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">if</span>(j&gt;=s.length)<span class="keyword">return</span> cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          j++;<span class="comment">//当前饼干被匹配的小孩吃掉，从下块饼干开始匹配</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          cnt++;<span class="comment">//匹配数加1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h3><p> 今天继续刷贪心算法题。</p>
<h4 id="435无重叠区间"><a href="#435无重叠区间" class="headerlink" title="#435无重叠区间"></a>#435无重叠区间</h4><p> <strong><em>tag：贪心算法</em></strong>  </p>
<p> 给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>
<p> 注意:</p>
<p> 可以认为区间的终点总是大于它的起点。<br> 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。<br> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [2,3], [3,4], [1,3] ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 移除 [1,3] 后，剩下的区间没有重叠。</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [1,2], [1,2] ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</span></pre></td></tr></table></figure>

<p> 示例 3:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [ [1,2], [2,3] ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</span></pre></td></tr></table></figure>

<p> Comparator详解</p>
<table>
<thead>
<tr>
<th align="center">int</th>
<th align="center">boolean</th>
</tr>
</thead>
<tbody><tr>
<td align="center">compare(T o1, T o2) 比较用来排序的两个参数。</td>
<td align="center">equals(Object obj) 指示某个其他对象是否“等于”此 Comparator</td>
</tr>
</tbody></table>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    class myComparator implements Comparator&lt;int[]&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//题目求需移除的区间最小数量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//即推最大无重复区间的数量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//通过贪心算法 局部最优解=》全局最优解</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(intervals.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> myComparator());<span class="comment">//结尾越小的区间排越前面</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;<span class="comment">//至少有一个无重复区间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];<span class="comment">//第一个区间的结尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;intervals.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//若区间与上一区间重合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>]&lt;end)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            end=intervals[i][<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> intervals.length-cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="452用最少数量的箭引爆气球"><a href="#452用最少数量的箭引爆气球" class="headerlink" title="#452用最少数量的箭引爆气球"></a>#452用最少数量的箭引爆气球</h4><p> <strong><em>tag：贪心算法</em></strong>  </p>
<p> 在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在10000个气球。</p>
<p> 一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>
<p> Example:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[[10,16], [2,8], [1,6], [7,12]]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出:</span></pre></td></tr><tr><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释:</span></pre></td></tr><tr><td class="code"><pre><span class="line">对于该样例，我们可以在x &#x3D; 6（射爆[2,8],[1,6]两个气球）和 x &#x3D; 11（射爆另外两个气球）。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    class myComparator implements Comparator&lt;int[]&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//与上题相似 也是要找最大重复区间数 重复区间可由一支飞镖引爆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//因此重复区间越多 需要用的飞镖就越少</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(points.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Arrays.sort(points, <span class="keyword">new</span> myComparator());<span class="comment">//结尾越小的区间排越前面</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> cnt=<span class="number">1</span>;<span class="comment">//至少有一个无重复区间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> end=points[<span class="number">0</span>][<span class="number">1</span>];<span class="comment">//第一个区间的结尾</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;points.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//若区间与上一区间重合 飞镖数不变</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(points[i][<span class="number">0</span>]&lt;=end)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//不重合则增加飞镖数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            end=points[i][<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h3><p> 今天做一周总结。复习。重新刷一遍这一周的题。</p>
<h4 id="1两数之和-1"><a href="#1两数之和-1" class="headerlink" title="#1两数之和"></a>#1两数之和</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       HashMap &lt;Integer,Integer&gt; hasIn=<span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//键值对</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">int</span> tem=target-nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(hasIn.containsKey(tem))<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;hasIn.get(tem),i&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           hasIn.put(nums[i], i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="2两数相加-1"><a href="#2两数相加-1" class="headerlink" title="#2两数相加"></a>#2两数相加</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode ans=<span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode cur=ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> n1,n2,jinwei=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span> || l2!=<span class="keyword">null</span>)<span class="comment">//两个数字都为空才结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l1==<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                n1=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                n1=l1.val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l2==<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                n2=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                n2=l2.val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> sum=n1+n2+jinwei;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(sum&gt;=<span class="number">10</span>)jinwei=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> jinwei=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cur=cur.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)l1=l1.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)l2=l2.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(jinwei==<span class="number">1</span>)cur.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="167两数之和Ⅱ-输入有序数组-1"><a href="#167两数之和Ⅱ-输入有序数组-1" class="headerlink" title="#167两数之和Ⅱ-输入有序数组"></a>#167两数之和Ⅱ-输入有序数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>,index2=numbers.length-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(index1&lt;index2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(target-numbers[index2]&gt;numbers[index1])index1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target-numbers[index2]&lt;numbers[index1])index2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;index1+<span class="number">1</span>,index2+<span class="number">1</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="633平方数之和-1"><a href="#633平方数之和-1" class="headerlink" title="#633平方数之和"></a>#633平方数之和</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> a=<span class="number">0</span>,b=(<span class="keyword">int</span>)Math.sqrt(c*<span class="number">1.0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(a&lt;=b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(c-b*b&gt;a*a)a++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(c-b*b&lt;a*a)b--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="345反转字符串中的元音字母-1"><a href="#345反转字符串中的元音字母-1" class="headerlink" title="#345反转字符串中的元音字母"></a>#345反转字符串中的元音字母</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       List &lt;Character&gt; vowels=<span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'e'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'i'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'o'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'u'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'A'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'E'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'I'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'O'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       vowels.add(<span class="string">'U'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> n1=<span class="number">0</span>,n2=s.length()-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       StringBuffer sb=<span class="keyword">new</span> StringBuffer(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(n1&lt;n2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(vowels.contains(s.charAt(n1))==<span class="keyword">false</span> &amp;&amp; vowels.contains(s.charAt(n2))==<span class="keyword">false</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(vowels.contains(s.charAt(n1))==<span class="keyword">true</span> &amp;&amp; vowels.contains(s.charAt(n2))==<span class="keyword">false</span>)n2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(vowels.contains(s.charAt(n1))==<span class="keyword">false</span> &amp;&amp; vowels.contains(s.charAt(n2))==<span class="keyword">true</span>)n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">char</span> tem=s.charAt(n1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">               sb.setCharAt(n1, s.charAt(n2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">               sb.setCharAt(n2, tem);</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n2--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p> 复习了一半，发现根本写不完，还是继续做新题吧，复习眼睛看看就好了。</p>
<h4 id="406根据身高重建队列"><a href="#406根据身高重建队列" class="headerlink" title="#406根据身高重建队列"></a>#406根据身高重建队列</h4><p> <strong><em>tag：贪心算法</em></strong>  </p>
<p> 假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。<br> 注意：总人数少于1100人。<br> 示例</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//为了使插入操作不影响后续的操作，身高较高的学生应该先做插入操作，否则身高较小的学生原先正确插入的第 k 个位置可能会变成第 k+1 个位置。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment">//身高 h 降序、个数 k 值升序，然后将某个学生插入队列的第 k 个位置中。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] reconstructQueue(<span class="keyword">int</span>[][] people) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(people==<span class="keyword">null</span> || people.length==<span class="number">0</span> || people[<span class="number">0</span>].length ==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//排序，对身高降序排列，对索引升序排列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Arrays.sort(people,(a,b)-&gt;(a[<span class="number">0</span>]==b[<span class="number">0</span>]?a[<span class="number">1</span>]-b[<span class="number">1</span>]:b[<span class="number">0</span>]-a[<span class="number">0</span>]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List &lt;<span class="keyword">int</span>[]&gt; ans=<span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] p:people)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ans.add(p[<span class="number">1</span>],p);<span class="comment">//在元素添加到下标位置，元素自动移位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[ans.size()][]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="121买卖股票的最佳时机"><a href="#121买卖股票的最佳时机" class="headerlink" title="#121买卖股票的最佳时机"></a>#121买卖股票的最佳时机</h4><p> <strong><em>tag：贪心算法 数组</em></strong>  </p>
<p> 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p> 如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p> 注意你不能在买入股票前卖出股票。</p>
<p> 示例 1:<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 5</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格。</span></pre></td></tr></table></figure></p>
<p> 示例 2:<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span></pre></td></tr></table></figure></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//维护两个变量 最低买入值 最大利润</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> minBuy=Integer.MAX_VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> maxProfit=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//如果买入价低于最低买入价，则不买入，更新最低买入价</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(prices[i]&lt;minBuy)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                minBuy=prices[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//买入后利润是否超过最大利润</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(prices[i]-minBuy&gt;maxProfit)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                maxProfit=prices[i]-minBuy;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> maxProfit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="122买卖股票的最佳时机Ⅱ"><a href="#122买卖股票的最佳时机Ⅱ" class="headerlink" title="#122买卖股票的最佳时机Ⅱ"></a>#122买卖股票的最佳时机Ⅱ</h4><p> <strong><em>tag：贪心算法 数组 数学</em></strong>  </p>
<p> 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p> 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p> 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 7</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出,  这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span></pre></td></tr></table></figure>

<p>示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span></pre></td></tr><tr><td class="code"><pre><span class="line">注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span></pre></td></tr></table></figure>

<p> 示例 3:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">//对于 [a, b, c, d]，如果有 a &lt;= b &lt;= c &lt;= d ，那么最大收益为 d - a。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">//而 d - a = (d - c) + (c - b) + (b - a) </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">//因此当访问到一个 prices[i] 且 prices[i] - prices[i-1] &gt; 0，那么就把 prices[i] - prices[i-1] 添加到收益中。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> profit=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(prices[i]&gt;prices[i-<span class="number">1</span>])profit+=(prices[i]-prices[i-<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> profit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h3><p> 休息</p>
<h3 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h3><p>  今天继续刷贪心题。</p>
<h4 id="605种花问题"><a href="#605种花问题" class="headerlink" title="#605种花问题"></a>#605种花问题</h4><p> <strong><em>tag：贪心算法 数组</em></strong>  </p>
<p> 假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>
<p> 给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: False</span></pre></td></tr></table></figure>

<p> 注意:<br> 数组内已种好的花不会违反种植规则。<br> 输入的数组长度范围为 [1, 20000]。<br> n 是非负整数，且不会超过输入数组的大小。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己写的一遍过</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//遍历数组，针对是0或1不同情况不同处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> cnt=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//特殊情况处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(flowerbed==<span class="keyword">null</span> || flowerbed.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(flowerbed.length==<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(flowerbed[<span class="number">0</span>]==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               cnt=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               cnt=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">return</span> cnt&gt;=n?<span class="keyword">true</span>:<span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;flowerbed.length;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//若已种花，则两边一定不能种</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(flowerbed[i]==<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               i+=<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(flowerbed[i]==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//边界讨论</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">if</span>(i==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   <span class="keyword">if</span>(flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       flowerbed[i]=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span>(i==flowerbed.length-<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   <span class="keyword">if</span>(flowerbed[i-<span class="number">1</span>]==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       flowerbed[i]=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//最普通情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">else</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   <span class="keyword">if</span>(flowerbed[i-<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       flowerbed[i]=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> cnt&gt;=n?<span class="keyword">true</span>:<span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//官方题解 更简洁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="keyword">int</span>[] flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span> (i &lt; flowerbed.length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span> (flowerbed[i] == <span class="number">0</span> &amp;&amp; (i == <span class="number">0</span> || flowerbed[i - <span class="number">1</span>] == <span class="number">0</span>) &amp;&amp; (i == flowerbed.length - <span class="number">1</span> || flowerbed[i + <span class="number">1</span>] == <span class="number">0</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               flowerbed[i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> count &gt;= n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>做了一道竞赛简单题。</p>
<h4 id="1346检查整数及其两倍数是否存在"><a href="#1346检查整数及其两倍数是否存在" class="headerlink" title="#1346检查整数及其两倍数是否存在"></a>#1346检查整数及其两倍数是否存在</h4><p> <strong><em>tag：贪心算法 数组</em></strong>  </p>
<p> 给你一个整数数组 arr，请你检查是否存在两个整数 N 和 M，满足 N 是 M 的两倍（即，N = 2 * M）。</p>
<p> 更正式地，检查是否存在两个下标 i 和 j 满足：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i !&#x3D; j</span></pre></td></tr><tr><td class="code"><pre><span class="line">0 &lt;&#x3D; i, j &lt; arr.length</span></pre></td></tr><tr><td class="code"><pre><span class="line">arr[i] &#x3D;&#x3D; 2 * arr[j]</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">示例 1：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入：arr &#x3D; [10,2,5,3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：true</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：N &#x3D; 10 是 M &#x3D; 5 的两倍，即 10 &#x3D; 2 * 5 。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">示例 2：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入：arr &#x3D; [7,1,14,11]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：true</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：N &#x3D; 14 是 M &#x3D; 7 的两倍，即 14 &#x3D; 2 * 7 。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">示例 3：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入：arr &#x3D; [3,1,7,11]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：false</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：在该情况下不存在 N 和 M 满足 N &#x3D; 2 * M 。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">提示：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2 &lt;&#x3D; arr.length &lt;&#x3D; 500</span></pre></td></tr><tr><td class="code"><pre><span class="line">-10^3 &lt;&#x3D; arr[i] &lt;&#x3D; 10^3</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkIfExist</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//排序后 用哈希表 将数组元素乘2和除2放入哈希表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(arr==<span class="keyword">null</span> || arr.length==<span class="number">0</span> || arr.length ==<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        HashSet&lt;Integer&gt;ms=<span class="keyword">new</span> HashSet&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> <span class="keyword">var</span>:arr)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(ms.contains(<span class="keyword">var</span>))<span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ms.add(<span class="keyword">var</span>*<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(<span class="keyword">var</span>%<span class="number">2</span>==<span class="number">0</span>)ms.add(<span class="keyword">var</span>/<span class="number">2</span>);<span class="comment">//能整除2再放入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="392判断子序列"><a href="#392判断子序列" class="headerlink" title="#392判断子序列"></a>#392判断子序列</h4><p> <strong><em>tag：贪心算法 数组</em></strong>  </p>
<p> 给定字符串 s 和 t ，判断 s 是否为 t 的子序列。</p>
<p> 你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &lt;=100）。</p>
<p> 字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;abc&quot;, t &#x3D; &quot;ahbgdc&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">返回 true.</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;axc&quot;, t &#x3D; &quot;ahbgdc&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">返回 false.</span></pre></td></tr></table></figure>

<h5 id="indexOf方法详述"><a href="#indexOf方法详述" class="headerlink" title="indexOf方法详述"></a>indexOf方法详述</h5><ul>
<li><p>public int indexOf(int ch): 返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</p>
</li>
<li><p>public int indexOf(int ch, int fromIndex): 返回从 fromIndex 位置开始查找指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</p>
</li>
<li><p>int indexOf(String str): 返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</p>
</li>
<li><p>int indexOf(String str, int fromIndex): 返回从 fromIndex 位置开始查找指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双指针法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//双指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> ss=<span class="number">0</span>,st=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(s.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(s==<span class="keyword">null</span> || t==<span class="keyword">null</span> || t.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//字符一一比对</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(st=<span class="number">0</span>;st&lt;t.length();st++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(s.charAt(ss)==t.charAt(st))ss++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//若指针走完，则比对完</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(ss==s.length())<span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//indexOf法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> i = -<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())&#123;<span class="comment">//将字符串转换为字符数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          i =  t.indexOf(c,i+<span class="number">1</span>);<span class="comment">//从i+1位置后找第一次出现字符c的索引，若无则返回-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           System.out.println(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">//找不到该字符 则不为子序列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(i == -<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">return</span>  <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="665非递减数列"><a href="#665非递减数列" class="headerlink" title="#665非递减数列"></a>#665非递减数列</h4></li>
</ul>
<p> <strong><em>tag：数组</em></strong>  </p>
<p> 给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。</p>
<p> 我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &lt;= i &lt; n)，满足 array[i] &lt;= array[i + 1]。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,2,3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: True</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,2,1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: False</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">说明:  n 的范围为 [1, 10,000]。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPossibility</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//遍历数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> hasModify=<span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(hasModify==<span class="keyword">false</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">//3 4 3 3 若把第二个3改成4 则false 若把4改成3 则true </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">//两种改法 后者优先 因为前者会影响后面的非递减性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span> || nums[i+<span class="number">1</span>]&gt;=nums[i-<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        hasModify=<span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        nums[i]=nums[i+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        hasModify=<span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        nums[i+<span class="number">1</span>]=nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h3><p>  今天刷完了贪心题，开始刷二分。</p>
<h4 id="53最大子序和"><a href="#53最大子序和" class="headerlink" title="#53最大子序和"></a>#53最大子序和</h4><p> <strong><em>tag：贪心算法 数组</em></strong>  </p>
<p> 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p> 示例:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//遍历数组 记录最大值 比较最大值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//特殊情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(nums.length==<span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> curMax=-<span class="number">10000</span>,ansMax=-<span class="number">100000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//当前得到的最大值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           curMax=nums[i]&gt;(curMax+nums[i])?nums[i]:curMax+nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//输出的最大值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           ansMax=Math.max(curMax, ansMax);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> ansMax;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="763划分字母区间"><a href="#763划分字母区间" class="headerlink" title="#763划分字母区间"></a>#763划分字母区间</h4><p> <strong><em>tag：贪心算法 双指针</em></strong>  </p>
<p> 字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: S &#x3D; &quot;ababcbacadefegdehijhklij&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: [9,7,8]</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释:</span></pre></td></tr><tr><td class="code"><pre><span class="line">划分结果为 &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;。</span></pre></td></tr><tr><td class="code"><pre><span class="line">每个字母最多出现在一个片段中。</span></pre></td></tr><tr><td class="code"><pre><span class="line">像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 的划分是错误的，因为划分的片段数较少。</span></pre></td></tr></table></figure>

<p> 注意:<br> S的长度在[1, 500]之间。<br> S只包含小写字母’a’到’z’。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">partitionLabels</span><span class="params">(String S)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//对于遇到的每一个字母，去找这个字母最后一次出现的位置，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//用来更新当前的最小区间。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] lastPos=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.length();i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//下标为字母 元素为最后出现的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            lastPos[S.charAt(i)-<span class="string">'a'</span>]=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Integer&gt; ans=<span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> tail=<span class="number">0</span>,head=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.length();i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//遇到字母就去找它的最后出现的位置 更新子区间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            tail=Math.max(tail,lastPos[S.charAt(i)-<span class="string">'a'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//i到了区间边界 该子区间完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(i==tail)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//将该区间长度加入数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                ans.add(tail-head+<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//下一区间开始</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                head=tail+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="69X的平方根"><a href="#69X的平方根" class="headerlink" title="#69X的平方根"></a>#69X的平方根</h4><p> <strong><em>tag：数学 二分查找</em></strong>  </p>
<p> 实现 int sqrt(int x) 函数。<br> 计算并返回 x 的平方根，其中 x 是非负整数。<br> 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 2</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">说明: 8 的平方根是 2.82842...,   </span></pre></td></tr><tr><td class="code"><pre><span class="line">由于返回类型是整数，小数部分将被舍去。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> x;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">long</span> num;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> pivot, left = <span class="number">2</span>, right = x / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">//关键在left&lt;=right，这使得最后答案为不大于精确值的最大整数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">while</span> (left &lt;= right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       pivot = left + (right - left) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       System.out.println(pivot);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       num = (<span class="keyword">long</span>)pivot * pivot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (num &gt; x) right = pivot - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; x) left = pivot + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> pivot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">return</span> right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr></table></figure>

<h4 id="744寻找比目标字母大的最小字母"><a href="#744寻找比目标字母大的最小字母" class="headerlink" title="#744寻找比目标字母大的最小字母"></a>#744寻找比目标字母大的最小字母</h4><p> <strong><em>tag：二分查找</em></strong>  </p>
<p> 给定一个只包含小写字母的有序数组letters 和一个目标字母 target，寻找有序数组里面比目标字母大的最小字母。</p>
<p> 数组里字母的顺序是循环的。举个例子，如果目标字母target = ‘z’ 并且有序数组为 letters = [‘a’, ‘b’]，则答案返回 ‘a’。</p>
<p> 示例:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">target &#x3D; &quot;a&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;c&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">target &#x3D; &quot;c&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;f&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">target &#x3D; &quot;d&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;f&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">target &#x3D; &quot;g&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;j&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">target &#x3D; &quot;j&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;c&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line">letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">target &#x3D; &quot;k&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: &quot;c&quot;</span></pre></td></tr></table></figure>

<p> 注:<br> letters长度范围在[2, 10000]区间内。<br> letters 仅由小写字母组成，最少包含两个不同的字母。<br> 目标字母target 是一个小写字母。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">nextGreatestLetter</span><span class="params">(<span class="keyword">char</span>[] letters, <span class="keyword">char</span> target)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=letters.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(left&lt;right)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(letters[middle]&lt;=target)left=middle+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span> right=middle;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//最后找到的这个middle就为小于等于目标字母的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//middle+1就为比目标字母的最小字母的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//因为是循环 所以取余</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> letters[left%letters.length];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="540有序数组中的单一元素"><a href="#540有序数组中的单一元素" class="headerlink" title="#540有序数组中的单一元素"></a>#540有序数组中的单一元素</h4><p> <strong><em>tag：二分查找</em></strong>  </p>
<p> 给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p>
<p> 示例 1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,1,2,3,3,4,4,8,8]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 2</span></pre></td></tr></table></figure>

<p> 示例 2:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [3,3,7,7,10,11,11]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出: 10</span></pre></td></tr></table></figure>

<p> 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNonDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//1 1 2 3 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//0 1 2 3 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//2之前 偶数开始 nums[0]=nums[1]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//2之后 偶数开始 nums[2]!=nums[3]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.length-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(left&lt;right)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//保证middle是偶数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(middle%<span class="number">2</span>!=<span class="number">0</span>)middle--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//单个元素之前</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(nums[middle]==nums[middle+<span class="number">1</span>])left=middle+<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">//单个元素之后</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> right=middle;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> nums[left];</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h3><p>  今天继续刷二分题。并且参加了周赛。</p>
<h4 id="278第一个错误的版本"><a href="#278第一个错误的版本" class="headerlink" title="#278第一个错误的版本"></a>#278第一个错误的版本</h4><p> <strong><em>tag：二分查找</em></strong>  </p>
<p> 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p>
<p> 假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p>
<p> 你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>
<p> 示例:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 n &#x3D; 5，并且 version &#x3D; 4 是第一个错误的版本。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">调用 isBadVersion(3) -&gt; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">调用 isBadVersion(5) -&gt; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">调用 isBadVersion(4) -&gt; true</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">所以，4 是第一个错误的版本。</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The isBadVersion API is defined in the parent class VersionControl.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     boolean isBadVersion(int version); */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">VersionControl</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">int</span> left=<span class="number">1</span>,right=n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//二分查找</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(left&lt;=right)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(isBadVersion(middle)==<span class="keyword">false</span>)left=middle+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span> right=middle-<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="5340统计有序矩阵中的负数"><a href="#5340统计有序矩阵中的负数" class="headerlink" title="#5340统计有序矩阵中的负数"></a>#5340统计有序矩阵中的负数</h4><p> <strong><em>tag：数组 二分查找</em></strong>  </p>
<p> 给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。<br> 请你统计并返回 grid 中 负数 的数目。<br> 示例 1：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：8</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：矩阵中共有 8 个负数。</span></pre></td></tr></table></figure>

<p> 示例 2：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [[3,2],[1,0]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：0</span></pre></td></tr></table></figure>

<p> 示例 3：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [[1,-1],[-1,-1]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：3</span></pre></td></tr></table></figure>

<p> 示例 4：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [[-1]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：1</span></pre></td></tr></table></figure>

<p> 提示：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m &#x3D;&#x3D; grid.length</span></pre></td></tr><tr><td class="code"><pre><span class="line">n &#x3D;&#x3D; grid[i].length</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; m, n &lt;&#x3D; 100</span></pre></td></tr><tr><td class="code"><pre><span class="line">-100 &lt;&#x3D; grid[i][j] &lt;&#x3D; 100</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNegatives</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">int</span> cnt=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//因为是有序，所以从矩阵右下角最小元素开始统计，向左上统计，遇到非负数，则往上一行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> m=grid.length-<span class="number">1</span>;m&gt;=<span class="number">0</span>;m--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=grid[m].length-<span class="number">1</span>;n&gt;=<span class="number">0</span>;n--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">if</span>(grid[m][n]&lt;<span class="number">0</span>)cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">else</span> <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="5341最后K个数的乘积"><a href="#5341最后K个数的乘积" class="headerlink" title="#5341最后K个数的乘积"></a>#5341最后K个数的乘积</h4><p> <strong><em>tag：数组 设计</em></strong>  </p>
<p> 请你实现一个「数字乘积类」ProductOfNumbers，要求支持下述两种方法：</p>
<ol>
<li><p>add(int num)<br>将数字 num 添加到当前数字列表的最后面。  </p>
</li>
<li><p>getProduct(int k)<br>返回当前数字列表中，最后 k 个数字的乘积。<br>你可以假设当前列表中始终 至少 包含 k 个数字。<br>题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出<br>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span></pre></td></tr><tr><td class="code"><pre><span class="line">[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：</span></pre></td></tr><tr><td class="code"><pre><span class="line">[null,null,null,null,null,null,20,40,0,null,32]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：</span></pre></td></tr><tr><td class="code"><pre><span class="line">ProductOfNumbers productOfNumbers &#x3D; new ProductOfNumbers();</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.add(3);        &#x2F;&#x2F; [3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.add(0);        &#x2F;&#x2F; [3,0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.add(2);        &#x2F;&#x2F; [3,0,2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.add(5);        &#x2F;&#x2F; [3,0,2,5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.add(4);        &#x2F;&#x2F; [3,0,2,5,4]</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.getProduct(2); &#x2F;&#x2F; 返回 20 。最后 2 个数字的乘积是 5 * 4 &#x3D; 20</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.getProduct(3); &#x2F;&#x2F; 返回 40 。最后 3 个数字的乘积是 2 * 5 * 4 &#x3D; 40</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.getProduct(4); &#x2F;&#x2F; 返回  0 。最后 4 个数字的乘积是 0 * 2 * 5 * 4 &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.add(8);        &#x2F;&#x2F; [3,0,2,5,4,8]</span></pre></td></tr><tr><td class="code"><pre><span class="line">productOfNumbers.getProduct(2); &#x2F;&#x2F; 返回 32 。最后 2 个数字的乘积是 4 * 8 &#x3D; 32 </span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">提示：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">add 和 getProduct 两种操作加起来总共不会超过 40000 次。</span></pre></td></tr><tr><td class="code"><pre><span class="line">0 &lt;&#x3D; num &lt;&#x3D; 100</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; k &lt;&#x3D; 40000</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//构造函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProductOfNumbers</span><span class="params">()</span> </span>&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//运用List实现功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  List&lt;Integer&gt; mylist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//将元素放入最后位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      mylist.add(num);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//从后往前遍历k个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">int</span> ans=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;<span class="number">0</span>;i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans*=mylist.get(mylist.size()-i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> ans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5342最多可以参加的会议数目"><a href="#5342最多可以参加的会议数目" class="headerlink" title="#5342最多可以参加的会议数目"></a>#5342最多可以参加的会议数目</h4><p> <strong><em>tag：排序 贪心算法</em></strong> </p>
<p> 给你一个数组 events，其中 events[i] = [startDayi, endDayi] ，表示会议 i 开始于 startDayi ，结束于 endDayi 。</p>
<p> 你可以在满足 startDayi &lt;= d &lt;= endDayi 中的任意一天 d 参加会议 i 。注意，一天只能参加一个会议。</p>
<p> 请你返回你可以参加的 最大 会议数目。<br> 示例 1：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：events &#x3D; [[1,2],[2,3],[3,4]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：3</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：你可以参加所有的三个会议。</span></pre></td></tr><tr><td class="code"><pre><span class="line">安排会议的一种方案如上图。</span></pre></td></tr><tr><td class="code"><pre><span class="line">第 1 天参加第一个会议。</span></pre></td></tr><tr><td class="code"><pre><span class="line">第 2 天参加第二个会议。</span></pre></td></tr><tr><td class="code"><pre><span class="line">第 3 天参加第三个会议。</span></pre></td></tr></table></figure>
<p> 示例 2：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：events&#x3D; [[1,2],[2,3],[3,4],[1,2]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：4</span></pre></td></tr></table></figure>

<p> 示例 3：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：events &#x3D; [[1,4],[4,4],[2,2],[3,4],[1,1]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：4</span></pre></td></tr></table></figure>

<p> 示例 4：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：events &#x3D; [[1,100000]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：1</span></pre></td></tr></table></figure>

<p> 示例 5：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：events &#x3D; [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：7</span></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提示：</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; events.length &lt;&#x3D; 10^5</span></pre></td></tr><tr><td class="code"><pre><span class="line">events[i].length &#x3D;&#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; events[i][0] &lt;&#x3D; events[i][1] &lt;&#x3D; 10^5</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  class myComparator implements Comparator&lt;int[]&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(<span class="keyword">int</span>[][] events)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    HashSet&lt;Integer&gt;ms=<span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//存储哪几天要去参加会议</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Arrays.sort(events,<span class="keyword">new</span> myComparator());<span class="comment">//会议结束日从小到大排序 结束的越早越不会影响到后面的会议</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> startDay=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> endDay=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//对每个会议（区间）进行遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span>[] tem:events)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      startDay=tem[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      endDay=tem[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//会议开始日到结束日只要有一天有空就能参加，参加会议的日子尽量往前排，这样不会影响到后面的会议</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=startDay;i&lt;=endDay;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//若这天没空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(ms.contains(i))<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//若有空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          ms.add(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          cnt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> cnt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="5343多次求和构造目标数组"><a href="#5343多次求和构造目标数组" class="headerlink" title="#5343多次求和构造目标数组"></a>#5343多次求和构造目标数组</h4><p> <strong><em>tag：队列 贪心算法</em></strong> </p>
<p> 给你一个整数数组 target 。一开始，你有一个数组 A ，它的所有元素均为 1 ，你可以执行以下操作：</p>
<p> 令 x 为你数组里所有元素的和<br> 选择满足 0 &lt;= i &lt; target.size 的任意下标 i ，并让 A 数组里下标为 i 处的值为 x 。<br> 你可以重复该过程任意次<br> 如果能从 A 开始构造出目标数组 target ，请你返回 True ，否则返回 False 。<br> 示例 1：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target &#x3D; [9,3,5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：true</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：从 [1, 1, 1] 开始</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1, 1, 1], 和为 3 ，选择下标 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1, 3, 1], 和为 5， 选择下标 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1, 3, 5], 和为 9， 选择下标 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[9, 3, 5] 完成</span></pre></td></tr></table></figure>

<p> 示例 2：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target &#x3D; [1,1,1,2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：false</span></pre></td></tr><tr><td class="code"><pre><span class="line">解释：不可能从 [1,1,1,1] 出发构造目标数组。</span></pre></td></tr></table></figure>

<p> 示例 3：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target &#x3D; [8,5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">输出：true</span></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提示：</span></pre></td></tr><tr><td class="code"><pre><span class="line">N &#x3D;&#x3D; target.length</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; target.length &lt;&#x3D; 5 * 10^4</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; target[i] &lt;&#x3D; 10^9</span></pre></td></tr></table></figure>

 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossible</span><span class="params">(<span class="keyword">int</span>[] target)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//逆向递归</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//队列头永远是最大元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> PriorityQueue&lt;&gt;(Collections.reverseOrder());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//将数组元素放入队列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t : target)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sum += t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q.offer(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//将所有元素总和不断减去最大元素 将其放入队列</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(!q.isEmpty() &amp;&amp; q.peek() &gt; <span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> next = q.poll();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(sum &lt;= next) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> diff = sum - next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> nnext = next - diff;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(nnext &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sum = next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q.offer(nnext);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">//最后队列元素个数一定和数组长度相同 且都为1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> n = target.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(q.size() != n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(!q.isEmpty())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(q.poll() != <span class="number">1</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>C#学习笔记</title>
    <url>/2020/01/18/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://space.bilibili.com/128373173?from=search&seid=6886721913430300205" target="_blank" rel="noopener">B站C#学习视频</a></p>
<ul>
<li><p>.net：一般指.net平台</p>
</li>
<li><p>.Net Framework 框架：是基于.net平台开发的程序能够有一个稳定的运行环境。（类库、环境）</p>
</li>
<li><p>解决方案包含项目，一个解决方案可以有多个项目。项目包含类，一个项目可以包含多个 类。   </p>
<ol>
<li>Properties：属性</li>
<li>App.config: 配置文件</li>
<li>Program.cs： 类文件</li>
</ol>
</li>
<li><p>引用命名空间：就是一个地址</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span></pre></td></tr></table></figure>
</li>
<li><p><strong>Camel 驼峰命名法</strong>：要求变量名首单词的首字母要小写，其余每个单词的首字母要大写。多用于给变量命名。</p>
</li>
<li><p><strong>Pascal 帕斯卡命名法</strong>：要求每个单词的首字母都要大写，其余字母小写。多用于给 类或者方法命名。</p>
</li>
<li><p>占位符  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"我的名字是&#123;0&#125;，我今年&#123;1&#125;"</span>,name,age);</span></pre></td></tr></table></figure>
</li>
<li><p><strong>前++</strong> 先将该值加1，再将其代入运算<br><strong>后++</strong> 先将该值代入运算，再将该值加1</p>
</li>
<li><p><strong>一元运算符</strong> 只需要一个操作符，++ –等<br><strong>二元运算符</strong> 需要两个或以上的运算符，+-*/%<br>一元运算符优先级高于二元运算符<br><code>int a=10; int b=10 + ++a;</code><br>先算++a，在计算与10的和，结果为21</p>
</li>
<li><p><strong>转义符</strong> 一个’&#39;+一个特殊字符组成一个具有特殊意义的字符。  </p>
<ol>
<li><p>\n 表示换行  </p>
</li>
<li><p>&quot; 表示英文半角的双引号</p>
</li>
<li><p>\t 表示一个tab键的大空格</p>
</li>
<li><p>\b 表示一个BackSpace退格键，会把前面一个字符删掉。头尾无作用。</p>
</li>
<li><p>输入路径需加@，不然会认为是一系列转义符<br><code>Console.WriteLine(@&quot;C:\c\a\d\f&quot;);</code></p>
</li>
<li><p>@还可以将字符串按照原格式输出  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">@"本来分成两行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">是会报错的"</span>);</span></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>隐式类型转换（自动类型转换）<br>条件1：两种类型兼容 int和double都是数字类型<br>条件2：原类型小于目标类型 例子：int-float int-double<br>显示类型转换（强制类型转换）<br>条件1：两种类型兼容<br>条件2：原类型大于目标类型 例子：double-int double-float<br><strong>int和int类型运算结果还是int</strong><br><strong>int和double运算结果是double类型</strong><br>下列b的结果就是10</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> a=<span class="number">10.5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b=(<span class="keyword">int</span>)a;</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习笔记</title>
    <url>/2019/12/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av56979800?from=search&seid=3637218318597964305" target="_blank" rel="noopener">B站学习视频</a></p>
<ul>
<li><p>脚本语言：逐行解释执行的语言。</p>
</li>
<li><p>JS的组成  </p>
<ol>
<li>ECMAScript：JavaScript语法（JavaScript-网景公司 Jscript-微软公司）</li>
<li>DOM：页面文档对象模型</li>
<li>BOM：浏览器对象模型</li>
</ol>
</li>
<li><p>JS有三种书写位置，分别为行内、内嵌和外部  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 2.内嵌式的js --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">            <span class="comment">// alert('沙漠骆驼');</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 3. 外部JS写法，双标签 script 中间一定不能写代码 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"my.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 1.行内式的js 直接写到元素内部 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"唐伯虎"</span> <span class="attr">onclick</span>=<span class="string">"alert('秋香姐')"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">+ 注释  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```html</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="comment">//    1.单行注释 crtl+/</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">    <span class="comment">/* 2.多行注释 默认的快捷键 shift+alt+a */</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">+ JS输入输出语句  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ```html</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">         prompt(<span class="string">'请输入你的年龄'</span>);<span class="comment">//这是一个输入框</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">         alert(<span class="string">'计算的结果是'</span>);<span class="comment">//弹出警示框 输出的展示给用户的</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'这是控制台给程序员看的'</span>);<span class="comment">//控制台输出 给程序员测试用的</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>变量和值<br>声明变量时，总是以关键字Var打头<br><code>var winner = 2;</code><br><code>var name = &quot;Duke;&quot;</code><br><code>var isEligible = false;</code><br>也可不赋初值<br><code>var losers;</code><br>字符串表达式<br><code>&quot;Dear &quot; + &quot;Reader&quot; + &quot;,&quot;</code> 得到新字符串”Dear Reader,”  </p>
</li>
<li><p>改变html文件中的元素  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"你好 Dolly"</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>Js对象<br>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name :   value) 来定义。<br><code>var person={firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566};</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">firstname : <span class="string">"John"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">lastname  : <span class="string">"Doe"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">id        :  <span class="number">5566</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>对象属性有两种寻址方式：<br><code>name=person.lastname;name=person[&quot;lastname&quot;];</code></p>
</li>
<li><p>对象中的方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>创建和使用对象方法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对象方法是一个函数定义,并作为一个属性值存储。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript"><span class="keyword">var</span> person = &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">   firstName: <span class="string">"John"</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">   lastName : <span class="string">"Doe"</span>,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   id : 5566,</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">   fullName : <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo1"</span>).innerHTML = <span class="string">"不加括号输出函数表达式："</span>  + person.fullName;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo2"</span>).innerHTML = <span class="string">"加括号输出函数执行结果："</span>  +  person.fullName();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>对字符串和数字进行加法运算<br>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串  </p>
</li>
<li><p>For/In 循环<br>JavaScript for/in 语句循环遍历对象的属性  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">"John"</span>,<span class="attr">lname</span>:<span class="string">"Doe"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)  <span class="comment">// x 为属性名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   txt=txt + person[x];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>变量提升<br>函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部。JavaScript 只有声明的变量会提升，初始化的不会。  </li>
<li>字符串断行需要使用反斜杠\  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">"Hello \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">World!"</span>;</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2019/12/02/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo-Next-主题美化"><a href="#Hexo-Next-主题美化" class="headerlink" title="Hexo Next 主题美化"></a>Hexo Next 主题美化</h1><p> <a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">Next主题美化指南</a></p>
<h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo deploy</code> #部署到GitHub<br><code>hexo help</code> # 查看帮助<br><code>hexo version</code> #查看Hexo的版本<br>缩写：<br><code>hexo n == hexo new</code><br><code>hexo g == hexo generate</code><br><code>hexo s == hexo server</code><br><code>hexo d == hexo deploy</code><br>组合命令：<br><code>hexo s -g</code> #生成并本地预览<br><code>hexo d -g</code> #生成并上传</p>
<h1 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h1><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法参考</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
